<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>()</key>
	<string>Matches an empty string, noted for possible reporting.</string>
	<key>(?!re)</key>
	<string>Matches at any point where no substring matching re begins.</string>
	<key>(?:)</key>
	<string>Matches an empty string without reporting.</string>
	<key>(?:re)</key>
	<string>Matches a match for re without reporting.</string>
	<key>(?=re)</key>
	<string>Matches at any point where a substring matching re begins.</string>
	<key>(re)</key>
	<string>Matching a match for re, noted for possible reporting.</string>
	<key>*</key>
	<string>An atom followed by `*' matches a sequence of 0 or more matches of the atom.</string>
	<key>*?</key>
	<string>An atom followed by `*?' matches a sequence of 0 or more matches of the atom, smallest number of matches.</string>
	<key>+</key>
	<string>An atom followed by `+' matches a sequence of 1 or more matches of the atom.</string>
	<key>+?</key>
	<string>An atom followed by `+?' matches a sequence of 1 or more matches of the atom, smallest number of matches.</string>
	<key>.</key>
	<string>Matches any single character.</string>
	<key>?</key>
	<string>An atom followed by `?' matches a sequence of 0 or 1 matches of the atom.</string>
	<key>??</key>
	<string>A sequence of 0 or 1 matches of the atom, smallest number of matches.</string>
	<key>Back Reference</key>
	<string>n is the index of a previous reporting atom.</string>
	<key>[.abc.]</key>
	<string>abc: a multi-character sequence that collates as if it were a single character.</string>
	<key>[[:abc:]]</key>
	<string>The list af all the characters belonging to the class name "abc".</string>
	<key>[[:alnum:]]</key>
	<string>Letter or digit.</string>
	<key>[[:alpha:]]</key>
	<string>Letter.</string>
	<key>[[:blank:]]</key>
	<string>Space or tab character.</string>
	<key>[[:cntrl:]]</key>
	<string>Control character.</string>
	<key>[[:digit:]]</key>
	<string>Digit.</string>
	<key>[[:graph:]]</key>
	<string>Visible character.</string>
	<key>[[:lower:]]</key>
	<string>Lower-case letter.</string>
	<key>[[:print:]]</key>
	<string>Letter or digit.</string>
	<key>[[:punct:]]</key>
	<string>Punctuation character.</string>
	<key>[[:space:]]</key>
	<string>White space characters.</string>
	<key>[[:upper:]]</key>
	<string>Upper-case letter.</string>
	<key>[[:xdigit:]]</key>
	<string>Hexadecimal digit.</string>
	<key>[=x=]</key>
	<string>Equivalent class.</string>
	<key>[]</key>
	<string>Bracket expression.</string>
	<key>[^]</key>
	<string>Bracket excluding expression.</string>
	<key>[a-z]</key>
	<string>Character range from "a" to "z" (inclusive)</string>
	<key>\?</key>
	<string>Literal question mark: ?</string>
	<key>\$</key>
	<string>Literal dollar: $</string>
	<key>\-</key>
	<string>Literal minus: -</string>
	<key>\+</key>
	<string>Literal plus: +</string>
	<key>\#</key>
	<string>Literal #</string>
	<key>\*</key>
	<string>Literal star: *</string>
	<key>\0</key>
	<string>Literal 0 (no \0)</string>
	<key>Whole match</key>
	<string>The whole matching substring found.</string>
	<key>\A</key>
	<string>Matches only at the beginning of the string.</string>
	<key>\B</key>
	<string>Backslash (convenience for doubling)</string>
	<key>\D</key>
	<string>Not a digit.</string>
	<key>\M</key>
	<string>Matches only at the end of a word.</string>
	<key>\S</key>
	<string>Not a space character.</string>
	<key>\Uxxxxxxxx</key>
	<string>Unicode character, x stands for an hexadecimal digit (0-9, a-h)</string>
	<key>\W</key>
	<string>Not a letter, nor a digit, nor an underscore (_).</string>
	<key>\Y</key>
	<string>Matches only at a point which is not the beginning or end of a word.</string>
	<key>\Z</key>
	<string>Matches only at the end of the string.</string>
	<key>\\</key>
	<string>Literal backslash (\).</string>
	<key>\[</key>
	<string>Literal opening bracket ([).</string>
	<key>\]</key>
	<string>Literal closing bracket (]).</string>
	<key>\(</key>
	<string>Literal opening parenthesis (().</string>
	<key>\)</key>
	<string>Literal closing parenthesis ()).</string>
	<key>\{</key>
	<string>Literal opening brace ({).</string>
	<key>\}</key>
	<string>Literal closing brace (}).</string>
	<key>\^</key>
	<string>Literal hat (^).</string>
	<key>\a</key>
	<string>C bell escape sequence.</string>
	<key>\b</key>
	<string>C backspace escape sequence.</string>
	<key>\cX</key>
	<string>X stands for any character: the character whose low-order 5 bits are the same as those of X and whose other bits are 0.</string>
	<key>\d</key>
	<string>Digit.</string>
	<key>\e</key>
	<string>C ESC escape sequence.</string>
	<key>\f</key>
	<string>C formfeed escape sequence.</string>
	<key>\m</key>
	<string>Matches only at the beginning of a word.</string>
	<key>\n</key>
	<string>C newline escape sequence.</string>
	<key>\oo</key>
	<string>When no back reference, the character whose octal value is 0oo, where o is an octal digit (0-7).</string>
	<key>\ooo</key>
	<string>When no back reference, the character whose octal value is 0ooo, where o is an octal digit (0-7).</string>
	<key>\r</key>
	<string>C return escape sequence.</string>
	<key>\s</key>
	<string>Space character.</string>
	<key>\t</key>
	<string>C horizontal tab escape sequence.</string>
	<key>\uxxxx</key>
	<string>The Unicode character U+xxxx in the local byte ordering, where x stands for an hexadecimal digit (0-9, a-h).</string>
	<key>\v</key>
	<string>C vertical tab escape sequence.</string>
	<key>\w</key>
	<string>Letter, digit or underscore (_).</string>
	<key>\xhhh</key>
	<string>The character whose hexadecimal value is 0xhhh, where h stands for an hexadecimal digit (0-9, a-h).</string>
	<key>\y</key>
	<string>Matches only at the beginning or end of a word.</string>
	<key>^</key>
	<string>Matches at the beginning of a line (outside a bracket expression)</string>
	<key>{i,j}</key>
	<string>An atom followed by `{i,j}' matches a sequence of i through j (inclusive) matches of the atom.</string>
	<key>{i,j}?</key>
	<string>An atom followed by `{i,j}?' matches a sequence of i through j (inclusive) matches of the atom, shortest match.</string>
	<key>{i,}</key>
	<string>An atom followed by `{i,}' matches a sequence of i or more matches of the atom.</string>
	<key>{i,}?</key>
	<string>An atom followed by `{i,}?' matches a sequence of i or more matches of the atom, shortest match.</string>
	<key>{i}</key>
	<string>An atom followed by `{i}' matches a sequence of exactly i matches of the atom.</string>
	<key>{i}?</key>
	<string>An atom followed by `{i}?' matches a sequence of exactly i matches of the atom.</string>
</dict>
</plist>
