This is a list of selectors iTeXMac knows about.

v 0.1 (06/22/2002)

Selectors with no arguments:
============================

they will be called with

    <key>X</key>
    <string>selectorNameWithColon:</string>

or in a sequence

    <key>X</key>
    <array>
        <string>selector1:</string>
        <string>selector2:</string>
        <string>selector3:</string>
        ...
    </array>


Standard NSResponder selectors:
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

From Apple's NSResponder documentation, all of them are not currently implemented or might be useless (they are marked with *)

moveForward:
moveRight:
moveBackward:
moveLeft:
moveUp:
moveDown:
moveWordForward:
moveWordBackward:
moveToBeginningOfLine:
moveToEndOfLine:
moveToBeginningOfParagraph:
moveToEndOfParagraph:
moveToEndOfDocument:
moveToBeginningOfDocument:
pageDown:
pageUp:
centerSelectionInVisibleArea:

moveBackwardAndModifySelection:
moveForwardAndModifySelection:
moveWordForwardAndModifySelection:
moveWordBackwardAndModifySelection:
moveUpAndModifySelection:
moveDownAndModifySelection:

scrollPageUp:
scrollPageDown:
scrollLineUp:
scrollLineDown:

   /* Graphical Element transposition */

transpose:
transposeWords:

   /* Selections */

selectAll:
selectParagraph:
selectLine:
selectWord:

   /* Insertions and Indentations */

indent:
insertTab:
insertBacktab:
insertNewline:
insertParagraphSeparator:
insertNewlineIgnoringFieldEditor:
insertTabIgnoringFieldEditor:

   /* Case changes */

changeCaseOfLetter:
uppercaseWord:
lowercaseWord:
capitalizeWord:

   /* Deletions */

deleteForward:
deleteBackward:
deleteWordForward:
deleteWordBackward:
deleteToBeginningOfLine:
deleteToEndOfLine:
deleteToBeginningOfParagraph:
deleteToEndOfParagraph:

yank:

   /* Completion */

complete:(*)

   /* Mark/Point manipulation */

setMark:
deleteToMark:
selectToMark:
swapWithMark:

From Apple's NSText documentation, all of them are not currently implemented

/************************* Text support *************************/

copy:
copyFont:(*)
copyRuler:(*)
cut:
delete:
paste:
pasteFont:(*)
pasteRuler:(*)
selectAll:
changeFont:(*)
alignLeft:(*)
alignRight:(*)
alignCenter:(*)
subscript:(*)
superscript:(*)
underline:(*)
unscript:(*)
showGuessPanel:
checkSpelling:
toggleRuler:(*)

From Apple's NSTextView documentation, all of them are not currently implemented

/************************* Speech support *************************/

startSpeaking:
stopSpeaking:

iTeXMac extensions:
=-=-=-=-=-=-=-=-=-=

/* Navigation */
selectPreviousTabAnchor:
selectPreviousTabAnchorAndDelete: (06/21/2002)
selectNextTabAnchor:
selectNextTabAnchorAndDelete: (06/21/2002)
scrollToPreviousError:
scrollToNextError:

/* Insertion */
insertUnderscore:
insertHat:
insertBackslash:
insertDollar:
insertOpenParenthesis:
insertOpenBracket:
insertTabAnchor:
insertBackslash:
closeLaTeXEnvironment: (07/02/2003)


This one is useful for testing: it forces iTeXMac to reload all the key bindings without restarting.
flushTextKeyBindings:

indentSelectedTextToPrevious:
alignSelectedTextToPrevious:
deleteLeadingWhitesOfSelectedText:
indentSelectedText:
unindentSelectedText:
commentSelectedText:
uncommentSelectedText:

Selectors with arguments:
=========================

they will be called with

    <key>X</key>
    <string>selectorNameWithColon:</string>

or in a sequence

    <key>X</key>
    <dict>
        <key>selector</key>
        <string>selectorNameWithColon:</string>
        <key>argument</key>
            What follows depends on the above selector
    </dict>


From Apple's NSText documentation

/************************* Text support *************************/

/* entry point, see special use*/
insertText: (string) argument;

calling sequence:
    <key>X</key>
    <dict>
        <key>selector</key>
        <string>insertText:</string>
        <key>argument</key>
        <string>any string you want to insert</string>
        <key>toolTip</key>
        <string>the string displayed in the status field</string>
    </dict>


iTeXMac extensions:
=-=-=-=-=-=-=-=-=-=

/* entry point, see special use*/
insertMacro: (dict) macro;

calling sequence (1):
    <key>X</key>
    <dict>
        <key>selector</key>
        <string>insertMacro:</string>
        <key>argument</key>
        <dict>
            <key>before</key>
            <string>BEFORE</string>
            <key>selected</key>
            <string>SELECTED</string>
            <key>after</key>
            <string>AFTER</string>
        </dict>
        <key>toolTip</key>
        <string>the string displayed in the status field</string>
    </dict>

calling sequence (2): (added on 06/22/2002)
    <key>X</key>
    <dict>
        <key>selector</key>
        <string>insertMacro:</string>
        <key>argument</key>
        <string>BEFORE</string>
        <key>toolTip</key>
        <string>the string displayed in the status field</string>
    </dict>

is functionnaly equivalent to (1) where SELECTED and AFTER are both void strings.

calling sequence (3): (added on 06/22/2002)
    <key>X</key>
    <string>BEFORE</string>

is functionnaly equivalent to (2) when no toolTip is given. This scheme is valid as long as BEFORE is not the keyword for a selector iTeXMac knows to be a command, which is quite always the case.

loadKeyBindingAtPath: (string) relativePath;

calling sequence:
	<key>?</key>
	<dict>
		<key>selector</key>
		<string>loadKeyBindingAtPath:</string>
		<key>argument</key>
		<string>a path relative to the folder "~Library/Application Support/iTeXMac/Key Bindings"</string>
	</dict>

/* Navigation */
executeAppleScriptAtPath: (string) relativePath;

calling sequence:
	<key>?</key>
	<dict>
		<key>selector</key>
		<string>executeAppleScriptAtPath:</string>
		<key>argument</key>
		<string>a path relative to the folder "~Library/Scripts/iTeXMac"</string>
	</dict>

In fact, search is made from user domain to outer domains.


06/22/2002 © jlaurens@users.sourceforge.net for iTeXMac
