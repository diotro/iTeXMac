#!/usr/bin/env bash
# Note that this seems to be bash since 10.2.6
# this is iTM2_Launch for iTeXMac2 1.0
# Â© 2006 jlaurens AT users.sourceforge.net
# setting the link
# iTM2_Launch "command with arguments"
# this should be called at least each time a project is open
# preferrably each time we execute something against a project
# this script does not care about the file extension!
# this script should live in $iTM2_HOME/Library/TeX/bin/iTeXMac2.app/Contents/Frameworks/iTM2TeXFoundation.framework/bin/iTM2_Launch
# The purpose is to create shortcuts to standard location where iTeXMac2 expects to find bins.
# long names and spaces problems are solved here.
#
#iTM2_CMD_Notify comment "iTM2: STARTING $0"
"${iTM2_TemporaryDirectory}/bin/iTeXMac2" notify echo "$(date "+START - DATE: %m/%d/%y - TIME: %H:%M:%S")"
iTM2_LAUNCH_VERSION=1
if ! [ -w "${iTM2_Device}" ]
then
    iTM2_Device="/dev/null"
fi
iTM2Command="$1"
# Sanity check: TWSMaster must be a readable file, no condition on TWSFront, TWSProject, TWSWrapper
iTM2BinaryPATH=""
if [ -d "${TWSProject}" ]
then
	pushd "$(dirname "${TWSProject}")"
	iTM2BinaryPATH="$(basename "${TWSProject}")/.iTM2"
	if [ ! -w "${TWSProject}" ]
	then
		"${iTM2_TemporaryDirectory}/bin/iTeXMac2" notify error "Project MUST BE writable (${TWSProject})"
		exit -1
	fi
	if [ "${iTM2_XLR8:-0}" == "0" ] || [ ! -d "${iTM2BinaryPATH}" ]
	then
		rm -Rf "${iTM2BinaryPATH}"
		mkdir -p "${iTM2BinaryPATH}"
		chmod -R a+rwx "${iTM2BinaryPATH}"
	fi
	if [ ! -d "${iTM2BinaryPATH}" ]
	then
		iTM2BinaryPATH=".iTM2"
		rm -Rf "${iTM2BinaryPATH}"
		mkdir "${iTM2BinaryPATH}"
		chmod -R a+rwx "${iTM2BinaryPATH}"
	fi
else
    "${iTM2_TemporaryDirectory}/bin/iTeXMac2" notify warning "Undefined project in $0, using the invisible folder named ${TWSMaster}/.iTM2"
	TWSProject=""# project is neutralized
	iTM2BinaryPATH=".iTM2"
	rm -Rf "${iTM2BinaryPATH}"
	mkdir "${iTM2BinaryPATH}"
	chmod -R u+rwx "${iTM2BinaryPATH}"
fi
iTM2SHORT="0"
iTM2Link ()
{
	local iTM2_TARGET="${iTM2BinaryPATH}/$iTM2SHORT"
    rm -Rf "${iTM2_TARGET}"
    if ( [ -d "$1" ] ) && ( [ -d "$1/bin" ] )
    then
		ln -s "$1" "${iTM2_TARGET}"
		iTM2PREFIX="${iTM2PREFIX}:${iTM2_TARGET}/bin";
		iTM2SHORT=$(expr ${iTM2SHORT} + 1)
    fi
}
# the binary path:
iTM2PREFIX=".:${iTM2BinaryPATH}"
iTM2Link "${iTM2_HOME}/Library/TeX"
iTM2Link "${iTM2_HOME}/Library/Application Support/iTeXMac2"
if [ ${#iTM2_TemporaryDirectory} -gt 0 ]
then
	iTM2Link "${iTM2_TemporaryDirectory}"
fi
iTM2Link "/Library/TeX"
iTM2Link "/Library/Application Support/iTeXMac2"
if [ ${#iTM2UseNetwork} -gt 0 ]
then
	iTM2Link "/Network/Library/TeX"
	iTM2Link "/Network/Library/Application Support/iTeXMac2"
fi
iTM2_BUILTIN_EXECUTABLE_PATH="$(dirname "$0")"
iTM2Link "$(dirname "$iTM2_BUILTIN_EXECUTABLE_PATH")"
# Now we are setting the PATH variable
if [ ${#iTM2PREFIX} -gt 0 ]
then
    PATH="$iTM2PREFIX:$PATH"
fi
if [ "${iTM2_Debug}" != "0" ]
then
	"${iTM2_CMD_Notify}" notify comment "PATH is {$PATH}"
fi
iTM2Cached="${iTM2BinaryPATH}/${iTM2Command}-cached"
if [ "${iTM2_XLR8:-0}" != "0" ] && [ 0 -eq 1 ]
then
	"${iTM2_CMD_Notify}" notify echo "<second time/>"
	if [ -x "${iTM2Cached}" ]
	then
		"${iTM2_CMD_Notify}" notify echo "<iTM2TaskStarted/>"
		eval "${iTM2Cached}"
		"${iTM2_CMD_Notify}" notify echo "<That's all/>"
		exit 0
	else
		"${iTM2_CMD_Notify}" notify echo "Nothing cached"
	fi
else
	"${iTM2_CMD_Notify}" notify echo "<first time/>"
fi
"${iTM2_CMD_Notify}" notify echo "<iTM2TaskStarted/>"
"${iTM2_CMD_Notify}" notify comment "Welcome to iTeXMac2 launch utility version ${iTM2_LAUNCH_VERSION}"
if [ ${#TWSMaster} -eq 0 ]
then
    "${iTM2_CMD_Notify}" notify error "Undefined TWSMaster in $0
You MUST specify a master document, from the project settings panel
Here are the environment variables
$(printenv)
Are they what was expected?"
    exit 1
fi
# the specific environment: (this is time consuming when debugging)
if [ "${iTM2_Debug:-0}" != "0" ]
then
	"${iTM2_CMD_Notify}" notify start comment
    "${iTM2_CMD_Notify}" notify echo "The $0 specific environment is:"
	for iTM2VAR in ${!iTM2*}
	do
		"${iTM2_CMD_Notify}" notify echo "${iTM2VAR} is: ${!iTM2VAR}"
	done
	"${iTM2_CMD_Notify}" notify stop comment
fi
# Then, let us transform scripts stored into environment variables into real shell scripts.
for iTM2SCRIPT in ${!iTM2_ShellScript_*}
do
	iTM2NAME="iTM2_${iTM2SCRIPT#iTM2_ShellScript_}"
	echo "${!iTM2SCRIPT}" > "${iTM2BinaryPATH}/${iTM2NAME}"
	chmod u+x "${iTM2BinaryPATH}/${iTM2NAME}"
	eval "${iTM2SCRIPT}=\"customized\""
	if [ "${iTM2_Debug}" != "0" ]
	then
		"${iTM2_CMD_Notify}" notify comment "customized script ${iTM2SCRIPT}: {$(which ${iTM2NAME})}"
	fi
done
if [ "${iTM2_Debug}" != "0" ]
then
	"${iTM2_CMD_Notify}" notify comment "The environment is:
$(printenv)
The binaries are (${iTM2BinaryPATH}):
$(ls -al "${iTM2BinaryPATH}")"
fi
# working directory?
if [ ${#TWSProject} -gt 0 ]
then
	export iTM2_PWD="$(dirname "${TWSProject}")"
	iTM2_PWD_Real="${iTM2_PWD##*Projects.put_aside}"
	export iTM2_PWD_Real="${iTM2_PWD_Real%/*.texd*}"
	if [ ${#iTM2_PWD_Real} -lt ${#iTM2_PWD} ]
	then
		export iTM2_PWD_Real="$(dirname "${TWSMaster}")"
		if [ ${#TEXINPUTS} -gt 0 ]
		then
			export TEXINPUTS=".:${iTM2_PWD_Real}:${TEXINPUTS}:"
		else
			export TEXINPUTS=".:${iTM2_PWD_Real}:"
		fi
		if [ ${#MPINPUTS} -gt 0 ]
		then
			export MPINPUTS=".:${iTM2_PWD_Real}:${MPINPUTS}:"
		else
			export MPINPUTS=".:${iTM2_PWD_Real}:"
		fi
		if [ ${#MFINPUTS} -gt 0 ]
		then
			export MFINPUTS=".:${iTM2_PWD_Real}:${MFINPUTS}:"
		else
			export MFINPUTS=".:${iTM2_PWD_Real}:"
		fi
		if [ ${#BIBINPUTS} -gt 0 ]
		then
			export BIBINPUTS=".:${iTM2_PWD_Real}:${BIBINPUTS}:"
		else
			export BIBINPUTS=".:${iTM2_PWD_Real}:"
		fi
		if [ ${#BSTINPUTS} -gt 0 ]
		then
			export BSTINPUTS=".:${iTM2_PWD_Real}:${BSTINPUTS}:"
		else
			export BSTINPUTS=".:${iTM2_PWD_Real}:"
		fi
		if [ ${#iTM2_PWD} -gt 0 ] && ! [ -r "${iTM2_PWD}/${TWSMasterBase}" ]
		then
			ln -sf "{TWSMaster}" "${iTM2_PWD}"
		fi
	fi
else
	export iTM2_PWD_Real="$(dirname "${TWSMaster}")"
	export iTM2_PWD="${iTM2_PWD_Real}"
fi
#"${iTM2_CMD_Notify}" notify comment "##### DIAGNOSTIC"
if [ $# -gt 0 ]
then
    iTM2IndirectCommand="iTM2_${iTM2Command}"
    iTM2WrappedCommand="${!iTM2IndirectCommand}"
#echo "! iTM2WrappedCommand: ${iTM2WrappedCommand}"
    iTM2CommandPath="$(which "${iTM2WrappedCommand}")"
#echo "! iTM2CommandPath: ${iTM2CommandPath}"
#echo "! PATH: ${PATH}"
#echo "the iTM2CommandPath is: ${iTM2CommandPath}"
# This is a bug, the which command does not work and I must do the work by myself
    if [ ! -x "${iTM2CommandPath}" ]
	then
#echo "iTM2Command is: $iTM2Command"
#echo "iTM2IndirectCommand is: $iTM2IndirectCommand"
#echo "iTM2WrappedCommand is: $iTM2WrappedCommand"
		oldIFS="$IFS"
		IFS=":"
		for COMPONENT in ${PATH}; do
			echo "the component is \"${COMPONENT}\""
			if [ ${#COMPONENT} -gt 0 ]
			then
				iTM2CommandPath="${COMPONENT}/${iTM2WrappedCommand}"
				if [ -x "${iTM2CommandPath}" ]
				then
					break
				else
					iTM2CommandPath=""
				fi
			fi
		done
	fi
	if [ -x "${iTM2CommandPath}" ]
	then
		if [ "${iTM2_RunSilently:-0}" == "0" ]
		then
				"${iTM2_CMD_Notify}" notify comment "running ${iTM2Command} (${iTM2WrappedCommand})"
		fi
		echo "\"${iTM2CommandPath}\"" > "${iTM2Cached}"
		chmod u+x "${iTM2Cached}"
		"${iTM2CommandPath}"
		status=$?
	else
		IFS="${oldIFS}"
		"${iTM2_CMD_Notify}" notify start error
		"${iTM2_CMD_Notify}" notify echo "No \"${iTM2Command}\" command is available neither built in nor customized"
		"${iTM2_CMD_Notify}" notify echo "iTM2Command is \"${iTM2Command}\""
		"${iTM2_CMD_Notify}" notify echo "iTM2IndirectCommand is \"${iTM2IndirectCommand}\""
		"${iTM2_CMD_Notify}" notify echo "iTM2WrappedCommand is \"${iTM2WrappedCommand}\""
		"${iTM2_CMD_Notify}" notify stop error
		status=1
		if [ "${iTM2_RunSilently:-0}" != "0" ]
		then
				"${iTM2_CMD_Notify}" notify error "the launch utility ends with $(basename "$1") Failed ($iTM2_Status)"
		fi
		iTeXMac2 notify echo "$(date "+END - DATE: %m/%d/%y - TIME: %H:%M:%S")"
		exit $iTM2_Status
	fi
    if [ "${iTM2_Status}" == "0" ]
    then
        if [ "${iTM2_RunSilently:-0}" != "0" ]
        then
                "${iTM2_CMD_Notify}" notify comment "the launch utility ends with $(basename "$1") Complete"
        fi
		iTeXMac2 notify echo "$(date "+END - DATE: %m/%d/%y - TIME: %H:%M:%S")"
        exit 0
    else
        if [ "${iTM2_RunSilently:-0}" != "0" ]
        then
                "${iTM2_CMD_Notify}" notify error "the launch utility ends with $(basename "$1") Failed ($iTM2_Status)"
        fi
		iTeXMac2 notify echo "$(date "+END - DATE: %m/%d/%y - TIME: %H:%M:%S")"
        exit $iTM2_Status
    fi
else
	iTeXMac2 notify echo "$(date "+END - DATE: %m/%d/%y - TIME: %H:%M:%S")"
	exit 2
fi
